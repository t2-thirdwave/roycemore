<?php

function roycemodule_entity_info_alter(&$entity_info) {
  $entity_info['fieldable_panels_pane']['bundles']['downloads'] = array(
    'label' => t('Downloads'),
    'pane category' => t('Global'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'pane icon' => 'profiles/panopoly/modules/panopoly/panopoly_widgets/images/icon_file.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/downloads',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
  $entity_info['fieldable_panels_pane']['bundles']['slideshow'] = array(
    'label' => t('Slideshow'),
    'pane category' => t('Global'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'pane icon' => 'profiles/panopoly/modules/panopoly/panopoly_widgets/images/icon_file.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/slideshow',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
  $entity_info['fieldable_panels_pane']['bundles']['event'] = array(
    'label' => t('Event'),
    'pane category' => t('Global'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'pane icon' => 'profiles/panopoly/modules/panopoly/panopoly_widgets/images/icon_file.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/event',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
  $entity_info['fieldable_panels_pane']['bundles']['accordion'] = array(
    'label' => t('Accordion'),
    'pane category' => t('Global'),
    'pane top level' => TRUE, // set to true to make this show as a top level icon
    'pane icon' => 'profiles/panopoly/modules/panopoly/panopoly_widgets/images/icon_file.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      // Note that this has all _ replaced with - from the bundle name.
      'real path' => 'admin/structure/fieldable-panels-panes/manage/accordion',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

}

function roycemodule_wysiwyg_filter_elements_blacklist_alter(&$blacklist){
  $blacklist = array(
    'applet',
    'area',
    'base',
    'basefont',
    'body',
    'button',
    'frame',
    'frameset',
    'head',
    'html',
    'isindex',
    'label',
    'link',
    'map',
    'meta',
    'noframes',
    'noscript',
    'optgroup',
    'option',
    'script',
    'select',
    'style',
    'textarea',
    'title',
  );
  return $blacklist;
}




/**
 * Implements hook_field_formatter_info().
 */
function roycemodule_field_formatter_info() {
  return array(
    'taxonomy_term_reference_link_with_class' => array(
      'label' => t('Link with class'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'taxonomy_term_reference_plain_with_class' => array(
      'label' => t('Plain text with class'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function roycemodule_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Terms whose tid is 'autocreate' do not exist
  // yet and $item['taxonomy_term'] is not set. Theme such terms as
  // just their name.

  switch ($display['type']) {
    case 'taxonomy_term_reference_link_with_class':
      foreach ($items as $delta => $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array(
            '#value' => check_plain($item['name']),
            '#theme' => 'html_tag',
            '#tag' => 'span',
            '#attributes' => array(
              'class' => array('term-tid-new'),
            ),
          );
        }
        else {
          $term = $item['taxonomy_term'];
          $uri = entity_uri('taxonomy_term', $term);
          $uri['options']['attributes']['class'][] = 'term-tid-' . $term->tid;
          $element[$delta] = array(
            '#type' => 'link',
            '#title' => $term->name,
            '#href' => $uri['path'],
            '#options' => $uri['options'],
          );
        }
      }

      break;

    case 'taxonomy_term_reference_plain_with_class':
      foreach ($items as $delta => $item) {
        $name = ($item['tid'] != 'autocreate' ? $item['taxonomy_term']->name : $item['name']);
        $tid = ($item['tid'] != 'autocreate' ? $item['taxonomy_term']->tid : 'new');
        $element[$delta] = array(
          '#value' => check_plain($name),
          '#theme' => 'html_tag',
          '#tag' => 'span',
          '#attributes' => array(
            'class' => array('term-tid-' . $tid),
          ),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_prepare_view().
 *
 * This preloads all taxonomy terms for multiple loaded objects at once and
 * unsets values for invalid terms that do not exist.
 */
function roycemodule_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Call prepare view formatter for a taxonomy term
  taxonomy_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

